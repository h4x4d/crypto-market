// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostAuthRegisterHandlerFunc turns a function with the right signature into a post auth register handler
type PostAuthRegisterHandlerFunc func(PostAuthRegisterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAuthRegisterHandlerFunc) Handle(params PostAuthRegisterParams) middleware.Responder {
	return fn(params)
}

// PostAuthRegisterHandler interface for that can handle valid post auth register params
type PostAuthRegisterHandler interface {
	Handle(PostAuthRegisterParams) middleware.Responder
}

// NewPostAuthRegister creates a new http.Handler for the post auth register operation
func NewPostAuthRegister(ctx *middleware.Context, handler PostAuthRegisterHandler) *PostAuthRegister {
	return &PostAuthRegister{Context: ctx, Handler: handler}
}

/*
	PostAuthRegister swagger:route POST /auth/register postAuthRegister

Register user by username and password
*/
type PostAuthRegister struct {
	Context *middleware.Context
	Handler PostAuthRegisterHandler
}

func (o *PostAuthRegister) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAuthRegisterParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostAuthRegisterBody post auth register body
//
// swagger:model PostAuthRegisterBody
type PostAuthRegisterBody struct {

	// email
	Email string `json:"email,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// password
	Password string `json:"password,omitempty"`
}

// Validate validates this post auth register body
func (o *PostAuthRegisterBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post auth register body based on context it is used
func (o *PostAuthRegisterBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAuthRegisterBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAuthRegisterBody) UnmarshalBinary(b []byte) error {
	var res PostAuthRegisterBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostAuthRegisterOKBody post auth register o k body
//
// swagger:model PostAuthRegisterOKBody
type PostAuthRegisterOKBody struct {

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this post auth register o k body
func (o *PostAuthRegisterOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post auth register o k body based on context it is used
func (o *PostAuthRegisterOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAuthRegisterOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAuthRegisterOKBody) UnmarshalBinary(b []byte) error {
	var res PostAuthRegisterOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
